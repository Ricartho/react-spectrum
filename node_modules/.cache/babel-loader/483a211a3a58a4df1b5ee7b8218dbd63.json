{"ast":null,"code":"import { useProvider, useProviderProps } from \"@react-spectrum/provider\";\nimport _react, { useCallback, useEffect, useState } from \"react\";\nimport { filterDOMProps, useLayoutEffect } from \"@react-aria/utils\";\nimport { classNames, SlotProvider, useDOMRef, useSlotProps, useStyleProps } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/buttongroup/vars.css\n\n\nvar $f9f91d1c186d99c6f3073$exports = {};\n$f9f91d1c186d99c6f3073$exports = {\n  \"spectrum-ButtonGroup\": \"_spectrum-ButtonGroup_25328\",\n  \"spectrum-ButtonGroup-Button\": \"_spectrum-ButtonGroup-Button_25328\",\n  \"spectrum-ButtonGroup--alignEnd\": \"_spectrum-ButtonGroup--alignEnd_25328\",\n  \"spectrum-ButtonGroup--alignCenter\": \"_spectrum-ButtonGroup--alignCenter_25328\",\n  \"spectrum-ButtonGroup--vertical\": \"_spectrum-ButtonGroup--vertical_25328\"\n};\nvar $f9f91d1c186d99c6f3073$$interop$default = $parcel$interopDefault($f9f91d1c186d99c6f3073$exports);\n\nfunction $acd6f0f772cf1ee18dc9ae3c3d09f4fe$var$ButtonGroup(props, ref) {\n  let {\n    scale\n  } = useProvider();\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'buttonGroup');\n\n  let {\n    children,\n    orientation = 'horizontal',\n    isDisabled,\n    align = 'start'\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"children\", \"orientation\", \"isDisabled\", \"align\"]);\n\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = useState(false);\n  let [dirty, setDirty] = useState(false);\n  let checkForOverflow = useCallback(() => {\n    if (domRef.current && orientation === 'horizontal') {\n      setHasOverflow(false);\n      let buttonGroupChildren = Array.from(domRef.current.children);\n      let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n      // If any buttons have negative X positions (align=\"end\") or extend beyond\n      // the width of the button group (align=\"start\"), then switch to vertical.\n\n      if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n        setHasOverflow(true);\n      }\n    }\n  }, [domRef, orientation]); // On scale or children change, remove vertical orientation class via dirty = true and check for overflow\n\n  useLayoutEffect(() => {\n    if (dirty) {\n      checkForOverflow();\n      setDirty(false);\n    }\n  }, [dirty, checkForOverflow]);\n  useEffect(() => {\n    if (!dirty) {\n      setDirty(true);\n    } // Don't add dirty to dep array since it will cause infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [children, scale]); // Check for overflow on window resize\n\n  useEffect(() => {\n    if (orientation !== 'vertical') {\n      // I think performance could be optimized here by creating a global, debounced hook for listening to resize\n      // events rather than creating an event-listener per component.\n      window.addEventListener('resize', checkForOverflow);\n      checkForOverflow();\n      return () => {\n        window.removeEventListener('resize', checkForOverflow);\n      };\n    }\n  }, [checkForOverflow, orientation]);\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, {\n    ref: domRef,\n    className: classNames($f9f91d1c186d99c6f3073$$interop$default, 'spectrum-ButtonGroup', {\n      'spectrum-ButtonGroup--vertical': orientation === 'vertical' || !dirty && hasOverflow,\n      'spectrum-ButtonGroup--alignEnd': align === 'end',\n      'spectrum-ButtonGroup--alignCenter': align === 'center'\n    }, styleProps.className)\n  }), /*#__PURE__*/_react.createElement(SlotProvider, {\n    slots: {\n      button: {\n        isDisabled,\n        UNSAFE_className: classNames($f9f91d1c186d99c6f3073$$interop$default, 'spectrum-ButtonGroup-Button')\n      }\n    }\n  }, children));\n}\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\n\n\nexport let ButtonGroup = _react.forwardRef($acd6f0f772cf1ee18dc9ae3c3d09f4fe$var$ButtonGroup);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/buttongroup/vars.css","packages/@react-spectrum/buttongroup/src/ButtonGroup.tsx"],"names":["a","scale","useProvider","props","useProviderProps","useSlotProps","orientation","align","otherProps","styleProps","useStyleProps","domRef","useDOMRef","useState","checkForOverflow","useCallback","setHasOverflow","buttonGroupChildren","Array","maxX","child","useLayoutEffect","setDirty","useEffect","window","filterDOMProps","classNames","button","UNSAFE_className","_ButtonGroup","React"],"mappings":";;;;;;;;AAAA,SAAA,sBAAA,CAAA,CAAA,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAANA,UAAAA,GAAoBA,CAAC,CAArBA,OAAAA,GAAP,CAAA;AACD,C;;;;ACFD,8BAAA,GAAiB;AACf,0BADe,6BAAA;AAEf,iCAFe,oCAAA;AAGf,oCAHe,uCAAA;AAIf,uCAJe,0CAAA;AAKf,oCAAkC;AALnB,CAAjB;;;ACoBA,SAAA,iDAAA,CAAA,KAAA,EAAA,GAAA,EAAmF;AACjF,MAAI;AAACC,IAAAA;AAAD,MAAUC,WAAd,EAAA;AACAC,EAAAA,KAAK,GAAGC,gBAAgB,CAAxBD,KAAwB,CAAxBA;AACAA,EAAAA,KAAK,GAAGE,YAAY,CAAA,KAAA,EAApBF,aAAoB,CAApBA;;AAEA,MAAI;AAAA,IAAA,QAAA;AAEFG,IAAAA,WAAW,GAFT,YAAA;AAAA,IAAA,UAAA;AAIFC,IAAAA,KAAK,GAAG;AAJN,MAAJ,KAAA;AAAA,MAKKC,UALL,GAAA,mDAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,aAAA,EAAA,YAAA,EAAA,OAAA,CAAA,CAAA;;AAQA,MAAI;AAACC,IAAAA;AAAD,MAAeC,aAAa,CAAhC,UAAgC,CAAhC;AACA,MAAIC,MAAM,GAAGC,SAAS,CAAtB,GAAsB,CAAtB;AACA,MAAI,CAAA,WAAA,EAAA,cAAA,IAAgCC,QAAQ,CAA5C,KAA4C,CAA5C;AACA,MAAI,CAAA,KAAA,EAAA,QAAA,IAAoBA,QAAQ,CAAhC,KAAgC,CAAhC;AAEA,MAAIC,gBAAgB,GAAGC,WAAW,CAAC,MAAM;AACvC,QAAIJ,MAAM,CAANA,OAAAA,IAAkBL,WAAW,KAAjC,YAAA,EAAoD;AAClDU,MAAAA,cAAc,CAAdA,KAAc,CAAdA;AACA,UAAIC,mBAAmB,GAAGC,KAAK,CAALA,IAAAA,CAAWP,MAAM,CAANA,OAAAA,CAArC,QAA0BO,CAA1B;AACA,UAAIC,IAAI,GAAGR,MAAM,CAANA,OAAAA,CAAAA,WAAAA,GAHuC,CAGlD,CAHkD,CAGP;AAC3C;AACA;;AACA,UAAIM,mBAAmB,CAAnBA,IAAAA,CAAyBG,KAAK,IAAIA,KAAK,CAALA,UAAAA,GAAAA,CAAAA,IAAwBA,KAAK,CAALA,UAAAA,GAAmBA,KAAK,CAAxBA,WAAAA,GAA9D,IAAIH,CAAJ,EAA4G;AAC1GD,QAAAA,cAAc,CAAdA,IAAc,CAAdA;AACD;AACF;AAV+B,GAAA,EAW/B,CAAA,MAAA,EA7B8E,WA6B9E,CAX+B,CAAlC,CAlBiF,CA+BjF;;AACAK,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAA,KAAA,EAAW;AACTP,MAAAA,gBAAgB;AAChBQ,MAAAA,QAAQ,CAARA,KAAQ,CAARA;AACD;AAJY,GAAA,EAKZ,CAAA,KAAA,EALHD,gBAKG,CALY,CAAfA;AAOAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAJ,KAAA,EAAY;AACVD,MAAAA,QAAQ,CAARA,IAAQ,CAARA;AAFY,KAAA,CAIhB;AACA;;AALS,GAAA,EAMN,CAAA,QAAA,EA7C8E,KA6C9E,CANM,CAATC,CAvCiF,CA+CjF;;AACAA,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIjB,WAAW,KAAf,UAAA,EAAgC;AAC9B;AACA;AACAkB,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAAA,gBAAAA;AACAV,MAAAA,gBAAgB;AAChB,aAAO,MAAM;AACXU,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAAA,gBAAAA;AADF,OAAA;AAGD;AATM,GAAA,EAUN,CAAA,gBAAA,EAVHD,WAUG,CAVM,CAATA;AAYA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,KAAA,EAAA,8BAAA,CAAA,EAAA,EACME,cAAc,CADpB,UACoB,CADpB,EAAA,UAAA,EAAA;AAGE,IAAA,GAAG,EAHL,MAAA;AAIE,IAAA,SAAS,EACPC,UAAU,CAAA,uCAAA,EAAA,sBAAA,EAGR;AACE,wCAAkCpB,WAAW,KAAXA,UAAAA,IAA+B,CAAA,KAAA,IADnE,WAAA;AAEE,wCAAkCC,KAAK,KAFzC,KAAA;AAGE,2CAAqCA,KAAK,KAAK;AAHjD,KAHQ,EAQRE,UAAU,CARF,SAAA;AALd,GAAA,CAAA,EAAA,aAgBE,MAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLkB,MAAAA,MAAM,EAAE;AAAA,QAAA,UAAA;AAENC,QAAAA,gBAAgB,EAAEF,UAAU,CAAA,uCAAA,EAAA,6BAAA;AAFtB;AADH;AADT,GAAA,EAjBJ,QAiBI,CAhBF,CADF;AA4BD;AAED;;;;;OAGA,IAAIG,WAAY,GAAGC,MAAK,CAALA,UAAAA,CAAnB,iDAAmBA,CAAnB","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useDOMRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps, useLayoutEffect} from '@react-aria/utils';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {SpectrumButtonGroupProps} from '@react-types/buttongroup';\nimport styles from '@adobe/spectrum-css-temp/components/buttongroup/vars.css';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\n\nfunction ButtonGroup(props: SpectrumButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  let {scale} = useProvider();\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'buttonGroup');\n\n  let {\n    children,\n    orientation = 'horizontal',\n    isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = useState(false);\n  let [dirty, setDirty] = useState(false);\n\n  let checkForOverflow = useCallback(() => {\n    if (domRef.current && orientation === 'horizontal') {\n      setHasOverflow(false);\n      let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n      let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n      // If any buttons have negative X positions (align=\"end\") or extend beyond\n      // the width of the button group (align=\"start\"), then switch to vertical.\n      if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n        setHasOverflow(true);\n      }\n    }\n  }, [domRef, orientation]);\n\n  // On scale or children change, remove vertical orientation class via dirty = true and check for overflow\n  useLayoutEffect(() => {\n    if (dirty) {\n      checkForOverflow();\n      setDirty(false);\n    }\n  }, [dirty, checkForOverflow]);\n\n  useEffect(() => {\n    if (!dirty) {\n      setDirty(true);\n    }\n  // Don't add dirty to dep array since it will cause infinite loop\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, scale]);\n\n  // Check for overflow on window resize\n  useEffect(() => {\n    if (orientation !== 'vertical') {\n      // I think performance could be optimized here by creating a global, debounced hook for listening to resize\n      // events rather than creating an event-listener per component.\n      window.addEventListener('resize', checkForOverflow);\n      checkForOverflow();\n      return () => {\n        window.removeEventListener('resize', checkForOverflow);\n      };\n    }\n  }, [checkForOverflow, orientation]);\n\n  return (\n    <div\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-ButtonGroup',\n          {\n            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || (!dirty && hasOverflow),\n            'spectrum-ButtonGroup--alignEnd': align === 'end',\n            'spectrum-ButtonGroup--alignCenter': align === 'center'\n          },\n          styleProps.className\n        )\n      }>\n      <SlotProvider\n        slots={{\n          button: {\n            isDisabled,\n            UNSAFE_className: classNames(styles, 'spectrum-ButtonGroup-Button')\n          }\n        }}>\n        {children}\n      </SlotProvider>\n    </div>\n  );\n}\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nlet _ButtonGroup = React.forwardRef(ButtonGroup);\nexport {_ButtonGroup as ButtonGroup};\n"]},"metadata":{},"sourceType":"module"}