{"mappings":"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","sources":["./packages/@react-stately/selection/src/Selection.ts","./packages/@react-stately/selection/src/useMultipleSelectionState.ts","./packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelection): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    setFocusedKey(k) {\n      focusedKeyRef.current = k;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node, SelectionMode} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key) {\n    this.state.setFocusedKey(key);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    return this.state.selectedKeys === 'all' || this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    toKey = this.getKey(toKey);\n    this.state.setSelectedKeys(selectedKeys => {\n      // Only select the one key if coming from a select all.\n      if (selectedKeys === 'all') {\n        return new Selection([toKey], toKey, toKey);\n      }\n\n      let selection = selectedKeys as Selection;\n      let anchorKey = selection.anchorKey || toKey;\n      let keys = new Selection(selection, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selection.currentKey || toKey)) {\n        keys.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        keys.add(key);\n      }\n\n      return keys;\n    });\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(selectedKeys => {\n      let keys = new Selection(selectedKeys === 'all' ? this.getSelectAllKeys() : selectedKeys);\n      if (keys.has(key)) {\n        keys.delete(key);\n        // TODO: move anchor to last selected key...\n        // Does `current` need to move here too?\n      } else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n\n      return keys;\n    });\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        let item = this.collection.getItem(key);\n        if (item.type === 'item') {\n          keys.push(key);\n        }\n\n        // Add child keys. If cell selection is allowed, then include item children too.\n        if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n          addKeys([...item.childNodes][0].key);\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    this.state.setSelectedKeys(new Selection());\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n}\n"],"names":["Selection","Set","constructor","keys","anchorKey","currentKey","useMultipleSelectionState","props","selectionMode","disallowEmptySelection","isFocusedRef","useRef","setFocused","useState","focusedKeyRef","setFocusedKey","selectedKeysProp","useMemo","convertSelection","selectedKeys","defaultSelectedKeys","setSelectedKeys","useControlledState","onSelectionChange","isFocused","current","f","focusedKey","k","selection","defaultValue","SelectionManager","collection","state","options","allowsCellSelection","_isSelectAll","key","getSelectAllKeys","isSelected","has","isEmpty","size","isSelectAll","allKeys","every","firstSelectedKey","first","item","getItem","index","lastSelectedKey","last","extendSelection","toKey","getKey","getKeyRange","delete","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","toggleSelection","replaceSelection","addKeys","hasChildNodes","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll"],"version":3,"file":"main.js.map"}